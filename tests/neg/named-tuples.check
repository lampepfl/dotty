-- Error: tests/neg/named-tuples.scala:9:19 ----------------------------------------------------------------------------
9 |  val illformed = (_2 = 2) // error
  |                   ^^^^^^
  |                   _2 cannot be used as the name of a tuple element because it is a regular tuple selector
-- Error: tests/neg/named-tuples.scala:10:20 ---------------------------------------------------------------------------
10 |  type Illformed = (_1: Int) // error
   |                    ^^^^^^^
   |                    _1 cannot be used as the name of a tuple element because it is a regular tuple selector
-- Error: tests/neg/named-tuples.scala:11:40 ---------------------------------------------------------------------------
11 |  val illformed2 = (name = "", age = 0, name = true)  // error
   |                                        ^^^^^^^^^^^
   |                                        Duplicate tuple element name
-- Error: tests/neg/named-tuples.scala:12:45 ---------------------------------------------------------------------------
12 |  type Illformed2 = (name: String, age: Int, name: Boolean) // error
   |                                             ^^^^^^^^^^^^^
   |                                             Duplicate tuple element name
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:18:25 ------------------------------------------------------
18 |  val y: (String, Int) = person // error
   |                         ^^^^^^
   |                         Found:    (Test.person : (name : String, age : Int))
   |                         Required: (String, Int)
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:19:25 ------------------------------------------------------
19 |  val _: (String, Int) = (name = "", age = 0) // error
   |                         ^^^^^^^^^^^^^^^^^^^^
   |                         Found:    (name : String, age : Int)
   |                         Required: (String, Int)
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:20:20 ------------------------------------------------------
20 |  val _: NameOnly = person // error
   |                    ^^^^^^
   |                    Found:    (Test.person : (name : String, age : Int))
   |                    Required: Test.NameOnly
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:21:18 ------------------------------------------------------
21 |  val _: Person = nameOnly // error
   |                  ^^^^^^^^
   |                  Found:    (Test.nameOnly : (name : String))
   |                  Required: Test.Person
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:23:36 ------------------------------------------------------
23 |  val _: (age: Int, name: String) = person // error
   |                                    ^^^^^^
   |                                    Found:    (Test.person : (name : String, age : Int))
   |                                    Required: (age : Int, name : String)
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg/named-tuples.scala:25:17 ---------------------------------------------------------------------------
25 |  val (name = x, agee = y) = person // error
   |                 ^^^^^^^^
   |                 No element named `agee` is defined in selector type (name : String, age : Int)
-- Error: tests/neg/named-tuples.scala:28:10 ---------------------------------------------------------------------------
28 |    case (name = n, age = a) => () // error // error
   |          ^^^^^^^^
   |          No element named `name` is defined in selector type (String, Int)
-- Error: tests/neg/named-tuples.scala:28:20 ---------------------------------------------------------------------------
28 |    case (name = n, age = a) => () // error // error
   |                    ^^^^^^^
   |                    No element named `age` is defined in selector type (String, Int)
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:30:21 ------------------------------------------------------
30 |  val pp = person ++ (1, 2)  // error
   |                     ^^^^^^
   |                     Found:    (Int, Int)
   |                     Required: NamedTuple.NamedTuple[N2, Tuple]
   |
   |                     where:    N2 is a type variable with constraint <: Tuple
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:33:12 ------------------------------------------------------
33 |  person ++ (1, 2) match // error
   |            ^^^^^^
   |            Found:    (Int, Int)
   |            Required: NamedTuple.NamedTuple[N2, Tuple]
   |
   |            where:    N2 is a type variable with constraint <: Tuple
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg/named-tuples.scala:36:17 ---------------------------------------------------------------------------
36 |  val bad = ("", age = 10) // error
   |                 ^^^^^^^^
   |                 Illegal combination of named and unnamed tuple elements
-- Error: tests/neg/named-tuples.scala:39:20 ---------------------------------------------------------------------------
39 |    case (name = n, age) => () // error
   |                    ^^^
   |                    Illegal combination of named and unnamed tuple elements
-- Error: tests/neg/named-tuples.scala:40:16 ---------------------------------------------------------------------------
40 |    case (name, age = a) => () // error
   |                ^^^^^^^
   |                Illegal combination of named and unnamed tuple elements
-- Error: tests/neg/named-tuples.scala:43:10 ---------------------------------------------------------------------------
43 |    case (age = x) => // error
   |          ^^^^^^^
   |          No element named `age` is defined in selector type Tuple
-- [E172] Type Error: tests/neg/named-tuples.scala:45:27 ---------------------------------------------------------------
45 |  val p2 = person ++ person // error
   |                           ^
   |Cannot prove that Tuple.Disjoint[(("name" : String), ("age" : String)), (("name" : String), ("age" : String))] =:= (true : Boolean).
-- [E172] Type Error: tests/neg/named-tuples.scala:46:43 ---------------------------------------------------------------
46 |  val p3 = person ++ (first = 11, age = 33) // error
   |                                           ^
   |Cannot prove that Tuple.Disjoint[(("name" : String), ("age" : String)), (("first" : String), ("age" : String))] =:= (true : Boolean).
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:48:22 ------------------------------------------------------
48 |  val p5 = person.zip(first = 11, age = 33) // error
   |                      ^^^^^^^^^^^^^^^^^^^^
   |                      Found:    (first : Int, age : Int)
   |                      Required: NamedTuple.NamedTuple[(("name" : String), ("age" : String)), Tuple]
   |
   | longer explanation available when compiling with `-explain`
-- Warning: tests/neg/named-tuples.scala:25:29 -------------------------------------------------------------------------
25 |  val (name = x, agee = y) = person // error
   |                             ^^^^^^
   |    pattern's type (String, Int) does not match the right hand side expression's type (name : String, age : Int)
   |
   |    If the narrowing is intentional, this can be communicated by adding `: @unchecked` after the expression,
   |    which may result in a MatchError at runtime.
   |    This patch can be rewritten automatically under -rewrite -source 3.2-migration.

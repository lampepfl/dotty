package dotty.tools.scripting

import java.nio.file.{ Files, Path }
import java.io.File
import java.lang.reflect.{ Modifier, Method }

import scala.jdk.CollectionConverters._

import dotty.tools.dotc.{ Driver }
import dotty.tools.dotc.core.Contexts, Contexts.{ Context, ctx }
import dotty.tools.io.{ PlainDirectory, Directory }
import dotty.tools.dotc.reporting.Reporter
import dotty.tools.dotc.config.Settings.Setting._
import dotty.tools.dotc.util.ScriptSourceFile
import dotty.tools.io.AbstractFile

class ScriptingDriver(compilerArgs: Array[String], scriptFile: File, scriptArgs: Array[String]) extends Driver:
  def compileAndRun(pack:(Path, String) => Unit = null): Unit =
    val outDir = Files.createTempDirectory("scala3-scripting")
    val (toCompile, rootCtx) = setup(compilerArgs :+ scriptFile.getAbsolutePath, initCtx.fresh)

    given Context = rootCtx.fresh.setSetting(rootCtx.settings.outputDir,
      new PlainDirectory(Directory(outDir)))

    val result = doCompile(newCompiler, toCompile)
    if result.hasErrors then
      throw ScriptingException(s"Errors encountered during compilation to dir [$outDir]")

    try 
      if outDir.toFile.listFiles.toList.isEmpty then
        sys.error(s"no files generated by compiling script ${scriptFile}")

      Option(pack) match {
      case None =>
      case Some(func) =>
        val javaClasspath = sys.props("java.class.path")
        val pathsep = sys.props("path.separator")
        val runtimeClasspath = s"${ctx.settings.classpath.value}$pathsep$javaClasspath"
        func(outDir, runtimeClasspath)
      }
    catch
      case e: java.lang.reflect.InvocationTargetException =>
        throw e.getCause
    finally
      deleteFile(outDir.toFile)

    def content(file: Path): Array[Char] = new String(Files.readAllBytes(file)).toCharArray
    def scriptSource(file: Path) = ScriptSourceFile(AbstractFile.getFile(file), content(file))

  end compileAndRun

  private def deleteFile(target: File): Unit =
    if target.isDirectory then
      for member <- target.listFiles.toList
      do deleteFile(member)
    target.delete()
  end deleteFile

end ScriptingDriver

case class ScriptingException(msg: String) extends RuntimeException(msg)
